from sqlalchemy import (
    Table,
    Column,
    ForeignKey,
    Integer,
    String,
    Date,
    Float
)
from sqlalchemy.orm import declarative_base, relationship

Base = declarative_base()

class Платежи(Base):
    __tablename__ = 'платежи'
    __table_args__ = {'schema': 'Проект2'}
    id = Column(Integer, autoincrement=True, primary_key=True, unique=True, nullable=False)
    id_пользователя = Column(Integer, ForeignKey('Проект2.пользователи.id'))
    дата = Column(Date, nullable=False)
    id_категории = Column(Integer, ForeignKey('Проект2.категории.id'))
    наименование_платежа = Column(String(255), nullable=False)
    количество = Column(Integer, nullable=False)
    цена = Column(Float, nullable=False)
    стоимость = Column(Float, nullable=False)
    
    категории = relationship("Категории", back_populates="платежи")
    пользователи = relationship("Пользователи", back_populates="платежи")

class Категории(Base):
    __tablename__ = 'категории'
    __table_args__ = {'schema': 'Проект2'}
    id = Column(Integer, autoincrement=True, primary_key=True, unique=True, nullable=False)
    название = Column(String(255), nullable=False)
   
    платежи = relationship("Платежи", back_populates="категории")

class Пользователи(Base):
    __tablename__ = 'пользователи'
    __table_args__ = {'schema': 'Проект2'}
    id = Column(Integer, autoincrement=True, primary_key=True, unique=True, nullable=False)
    фио = Column(String(500), nullable=False)
    логин = Column(String(100), nullable=False, unique=True)
    пароль = Column(String(100), nullable=False, unique=True)
    пин_код = Column(Integer,nullable=False, unique=True)

    платежи = relationship("Платежи", back_populates="пользователи")


# Требуется разработать программное решение для учета платежей
# физических лиц. Используя полученный программный платеж физические
# лица могут вести учет своих платежей. Кроме того, появится возможность
# производить несложный анализ затрат в разрезе периодов или категорий.
# Также можно получать результаты анализа в печатной форме. В данном задании вам потребуется реализовать функционал по
# созданию отчётов в формате docx или pdf. Вам поможет пакет reportlab.
# Изучите документацию о пакете по ссылке: https://ru.python-3.com/?p=54
# Также, указано требование – шифрование паролей. Вам помогут пакеты
# bcrypt.
# Обратите внимание, что разработанное приложение необходимо
# выполнить в рамках 31 предоставленных требований. 1. Разработайте пользовательский интерфейс по предоставленным
# макетам; 2. Программное решение должно быть многопользовательским.
# 3. Пароли должны обязательно храниться в зашифрованном виде.
# 4. Логин можно выбирать из выпадающего списка. 5. В окне выводятся только данные текущего пользователя.
# 6. Данные должны помещаться на один экран по ширине.
# 7. Данные можно отображать за выбранный период (от даты до даты).
# 8. Данные можно отображать по одной из категорий.
# 9. Данные можно добавлять.
# 10. Данные можно удалять.
# 11. По отображаемым данным можно получить отчёт. 12.При добавлении данных можно указывать категорию платежа
# 13. Обязательно указывается назначение платежа
# 14. Назначение платежа указывается на русском языке.
# 15. Назначение платежа состоит как минимум из 3 букв.
# 16. Единоразово можно совершить несколько одинаковых платежей. 17. Количество обязательно должно быть целым положительным
# числом.
# 18. Для платежа обязательно указывается цена в рублях.
# 19. Цена не может быть отрицательной.
# 20. Стоимость платежа рассчитывается как количество * цена.
# 21. Дата платежа указывается как текущее время на компьютере. 22. При удалении данных система должна запрашивать подтверждение.
# 23. В подтверждении нужно выводить назначение платежа и другую
# значимую информацию.
# 24. Удаление должно сопровождаться звуковым или визуальным
# оформлением. 25. Отчёт может выводиться встроенными средствами, либо в
# распространённых программных продуктах (формат docx, pdf)
# 26. У отчёта обязательно должен быть заголовок на первой странице.
# 27. В заголовке может быть указан период и категория платежей.
# 28. На каждой странице указывается ФИО пользователя и номер
# страницы.
# 29. Платежи группируются по категориям.
# 30. Внутри каждой категории платежи сортируются по дате.
# 31. В конце отчета выводится суммарная стоимость всех показанных
# платежей.